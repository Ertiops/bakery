"""empty message

Revision ID: b14d782515b9
Revises:
Create Date: 2025-08-20 10:28:14.806905

"""

from collections.abc import Sequence

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

revision: str = "b14d782515b9"
down_revision: str | None = None
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "order_schedules",
        sa.Column("weekdays", postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column("min_days_before", sa.Integer(), nullable=False),
        sa.Column("max_days_in_advance", sa.Integer(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk__order_schedules")),
    )
    op.create_table(
        "pickup_addresses",
        sa.Column("name", sa.String(length=256), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk__pickup_addresses")),
    )
    op.create_index(
        op.f("ix__pickup_addresses__name"),
        "pickup_addresses",
        ["name"],
        unique=True,
        postgresql_where="deleted_at IS NULL",
    )
    op.create_table(
        "products",
        sa.Column("name", sa.String(length=128), nullable=False),
        sa.Column("description", sa.String(length=1024), nullable=False),
        sa.Column(
            "category",
            postgresql.ENUM(
                "bread",
                "oil",
                "flour",
                "dessert",
                "noodle",
                "other",
                name="product_category",
            ),
            nullable=False,
        ),
        sa.Column("price", sa.Integer(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk__products")),
    )
    op.create_index(
        op.f("ix__products__name"),
        "products",
        ["name"],
        unique=True,
        postgresql_where="deleted_at IS NULL",
    )
    op.create_table(
        "users",
        sa.Column("name", sa.String(length=63), nullable=False),
        sa.Column("tg_id", sa.Integer(), nullable=False),
        sa.Column("phone", sa.String(length=16), nullable=False),
        sa.Column(
            "role", postgresql.ENUM("admin", "user", name="user_role"), nullable=False
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk__users")),
    )
    op.create_index(
        op.f("ix__users__phone"),
        "users",
        ["phone"],
        unique=True,
        postgresql_where="deleted_at IS NULL",
    )
    op.create_index(
        op.f("ix__users__tg_id"),
        "users",
        ["tg_id"],
        unique=True,
        postgresql_where="deleted_at IS NULL",
    )
    op.create_table(
        "carts",
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("product_id", sa.UUID(), nullable=False),
        sa.Column("quantity", sa.Integer(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["product_id"],
            ["products.id"],
            name=op.f("fk__carts__product_id__products"),
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name=op.f("fk__carts__user_id__users")
        ),
        sa.PrimaryKeyConstraint("user_id", "id", name=op.f("pk__carts")),
    )
    op.create_index(
        op.f("ix__carts__user_id_product_id"),
        "carts",
        ["user_id", "product_id"],
        unique=True,
        postgresql_where="deleted_at IS NULL",
    )
    op.create_table(
        "orders",
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("pickup_address_id", sa.UUID(), nullable=True),
        sa.Column(
            "status",
            postgresql.ENUM(
                "on_accept",
                "in_progress",
                "delivered",
                "cancelled",
                "paid",
                name="order_status",
            ),
            nullable=False,
        ),
        sa.Column("products", postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column("address", sa.String(length=256), nullable=True),
        sa.Column("delivered_at", sa.Date(), nullable=False),
        sa.Column("price", sa.Integer(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["pickup_address_id"],
            ["pickup_addresses.id"],
            name=op.f("fk__orders__pickup_address_id__pickup_addresses"),
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name=op.f("fk__orders__user_id__users")
        ),
        sa.PrimaryKeyConstraint("user_id", "id", name=op.f("pk__orders")),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("orders")
    op.drop_index(
        op.f("ix__carts__user_id_product_id"),
        table_name="carts",
        postgresql_where="deleted_at IS NULL",
    )
    op.drop_table("carts")
    op.drop_index(
        op.f("ix__users__tg_id"),
        table_name="users",
        postgresql_where="deleted_at IS NULL",
    )
    op.drop_index(
        op.f("ix__users__phone"),
        table_name="users",
        postgresql_where="deleted_at IS NULL",
    )
    op.drop_table("users")
    op.drop_index(
        op.f("ix__products__name"),
        table_name="products",
        postgresql_where="deleted_at IS NULL",
    )
    op.drop_table("products")
    op.drop_index(
        op.f("ix__pickup_addresses__name"),
        table_name="pickup_addresses",
        postgresql_where="deleted_at IS NULL",
    )
    op.drop_table("pickup_addresses")
    op.drop_table("order_schedules")
    # ### end Alembic commands ###
